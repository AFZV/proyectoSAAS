generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Empresa {
  id               String             @id @default(uuid())
  nit              String             @unique
  razonSocial      String             @db.Text
  nombreComercial  String             @db.Text
  direccion        String             @db.Text
  telefono         String             @db.Text
  departamento     String             @db.Text
  ciudad           String             @db.Text
  correo           String             @db.Text
  logoUrl          String             @db.Text
  creado           DateTime           @default(now())
  actualizado      DateTime           @updatedAt

  usuarios         Usuario[]
  clientes         ClienteEmpresa[]
  productos        Producto[]
}

model Usuario {
  id        String   @id @default(uuid())
  codigo    String   @unique @db.Text
  nombres   String   @db.Text
  apellidos String   @db.Text
  telefono  String   @db.Text
  correo    String   @db.Text
  rol       String   @db.Text

  empresaId String
  empresa   Empresa  @relation(fields: [empresaId], references: [id])

  clientes  ClienteEmpresa[] // relaci√≥n con clientes como vendedor
  recibos   Recibo[]
  pedidos   Pedido[]

  @@index([empresaId])
}

model Cliente {
  id         String            @id @default(uuid())
  nit        String            @db.Text
  nombres    String            @db.Text
  apellidos  String            @db.Text
  telefono   String            @db.Text
  email      String            @db.Text
  direccion  String            @db.Text
  codigoDpto String            @db.Text
  codigoCiud String            @db.Text

  empresas   ClienteEmpresa[]
  recibos    Recibo[]
  pedidos    Pedido[]

  @@index([nit])
}

model ClienteEmpresa {
  id          String   @id @default(uuid())
  clienteId   String
  empresaId   String
  vendedorId  String

  cliente     Cliente  @relation(fields: [clienteId], references: [id])
  empresa     Empresa  @relation(fields: [empresaId], references: [id])
  vendedor    Usuario  @relation(fields: [vendedorId], references: [id])

  @@unique([clienteId, empresaId])
  @@index([empresaId])
  @@index([vendedorId])
}

model Producto {
  id          String   @id @default(uuid())
  codigo      Int      @default(autoincrement())
  nombre      String   @db.Text
  precio      Float    @db.DoublePrecision
  categoria   String   @db.Text
  imagenUrl   String   @db.Text
  creado      DateTime @default(now())
  actualizado DateTime @updatedAt

  empresaId   String
  empresa     Empresa  @relation(fields: [empresaId], references: [id])

  pedidoProductos PedidoProducto[]

  @@index([empresaId])
}

model Recibo {
  id          String   @id @default(uuid())
  clienteId   String
  usuarioId   String
  valor       Float    @db.DoublePrecision
  tipo        String   @db.Text
  concepto    String   @db.Text
  creado      DateTime @default(now())

  cliente     Cliente  @relation(fields: [clienteId], references: [id])
  vendedor    Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([clienteId])
}

model Pedido {
  id            String           @id @default(uuid())
  clienteId     String
  vendedorId    String
  total         Float            @db.DoublePrecision
  fecha         DateTime         @default(now())
  observaciones String?          @db.Text
  enviado       Boolean          @default(false)
  fechaEnvio    DateTime?
  actualizado   DateTime         @updatedAt

  cliente       Cliente          @relation(fields: [clienteId], references: [id])
  vendedor      Usuario          @relation(fields: [vendedorId], references: [id])
  productos     PedidoProducto[]
  estados       EstadoPedido[]

  @@index([clienteId])
  @@index([vendedorId])
}

model PedidoProducto {
  id         String @id @default(uuid())
  pedidoId   String
  productoId String
  cantidad   Int
  precio     Float  @db.DoublePrecision

  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  producto   Producto @relation(fields: [productoId], references: [id])

  @@unique([pedidoId, productoId])
  @@index([pedidoId])
  @@index([productoId])
}

model EstadoPedido {
  id        String   @id @default(uuid())
  pedidoId  String
  estado    String
  fecha     DateTime @default(now())

  pedido    Pedido   @relation(fields: [pedidoId], references: [id])

  @@index([pedidoId])
}
