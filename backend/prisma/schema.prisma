generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Empresa {
  id               String             @id @default(uuid())
  nit              String             @unique
  razonSocial      String             @db.Text
  nombreComercial  String             @db.Text
  direccion        String             @db.Text
  telefono         String             @db.Text
  departamento     String             @db.Text
  ciudad           String             @db.Text
  correo           String             @db.Text
  logoUrl          String             @db.Text
  creado           DateTime           @default(now())
  actualizado      DateTime           @updatedAt
  estado           String             @db.Text

  usuarios         Usuario[]
  clientes         ClienteEmpresa[]
  productos        Producto[]
  inventario Inventario[]
  movimientoInventario MovimientoInventario[]
}

model Usuario {
  id        String   @id @default(uuid())
  codigo    String   @unique @db.Text /// es un id unico de clerk
  nombre   String   @db.Text
  apellidos String   @db.Text
  telefono  String   @db.Text
  correo    String   @db.Text
  rol       String   @db.Text
  estado    String @db.Text //// activo inactivo

  empresaId String
  empresa   Empresa  @relation(fields: [empresaId], references: [id])

  clientes  ClienteEmpresa[] // relaci√≥n con clientes como vendedor
  recibos   Recibo[]
  pedidos   Pedido[]
  movimientoInventario MovimientoInventario[]
  movimientosCartera MovimientosCartera[]

  @@index([empresaId])
}

model Cliente {
  id         String            @id @default(uuid())
  nit        String            @db.Text
  nombre    String            @db.Text
  apellidos  String            @db.Text
  telefono   String            @db.Text
  email      String            @db.Text
  direccion  String            @db.Text
  departamento String            @db.Text
  ciudad String            @db.Text
  estado Boolean @db.Boolean /// activo // inactivo

  empresas   ClienteEmpresa[]
  recibos    Recibo[]
  pedidos    Pedido[]
  movimientosCartera MovimientosCartera[]


  @@index([nit])
}



model ClienteEmpresa {
  id          String   @id @default(uuid())
  clienteId   String
  empresaId   String
  usuarioId  String

  cliente     Cliente  @relation(fields: [clienteId], references: [id])
  empresa     Empresa  @relation(fields: [empresaId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  @@unique([clienteId, empresaId])
  @@index([empresaId])
  @@index([usuarioId])
}

model Producto {
  id          String   @id @default(uuid())
  codigo      Int      @default(autoincrement())
  nombre      String   @db.Text
  precioCompra      Float    @db.DoublePrecision
  precioVenta      Float    @db.DoublePrecision
  categoria   String   @db.Text
  imagenUrl   String   @db.Text
  fechaCreado      DateTime @default(now())
  fechaActualizado DateTime @updatedAt
  estado String @db.Text

  empresaId   String
  empresa     Empresa  @relation(fields: [empresaId], references: [id])

  detallePedido DetallePedido[]
  inventario  Inventario[]
  detalleCompra DetalleCompra[]
  movimientoInventario MovimientoInventario[]

  @@index([empresaId])
  @@unique([codigo, empresaId])

}


model Inventario {
  idInventario String   @id @default(uuid())
  idProducto String
  idEmpresa String
  stockActual Float @default(0) @db.DoublePrecision

  producto Producto @relation(fields: [idProducto],references: [id])
  empresa Empresa @relation(fields: [idEmpresa],references: [id])

  @@index([idProducto])
  @@index([idEmpresa])
   
}

model DetalleCompra {
    idDetalleCompra String   @id @default(uuid())
    idCompra String
    idProducto String
    cantidad Float    @db.DoublePrecision

    producto Producto @relation(fields: [idProducto],references: [id])
    compra Compras @relation(fields: [idCompra],references: [idCompra])

    @@index([idCompra])
    @@index([idProducto])



}

model Compras {
  idCompra String   @id @default(uuid())
  idProveedor String
  FechaCompra DateTime @default(now())

  proveedor Proveedores @relation(fields: [idProveedor],references: [idProveedor])
  detalleCompra DetalleCompra[]


@@index([idProveedor])

}

model Proveedores {
  idProveedor String   @id @default(uuid())
  identificacion String @unique
  razonsocial String @db.Text
  telefono String @db.Text
  direccion String @db.Text

  compras Compras[]
}

model Recibo {
  id          String   @id @default(uuid())
  clienteId   String
  usuarioId   String
  tipo        String   @db.Text
  concepto    String   @db.Text
  Fechacrecion      DateTime @default(now())

  cliente     Cliente  @relation(fields: [clienteId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  detalleRecibo DetalleRecibo[]


  @@index([usuarioId])
  @@index([clienteId])
}

model DetalleRecibo{
  idDetalleRecibo String   @id @default(uuid())
  idPedido String
  idRecibo String 
  valorTotal       Float    @db.DoublePrecision
  estado     String @default("abonado") // o parcial, completo
  saldoPendiente Float? // opcional

  pedido Pedido @relation(fields: [idPedido],references: [id])
  recibo Recibo @relation(fields: [idRecibo],references: [id])
  @@index([idRecibo])
  @@index([idPedido])



}

model Pedido {
  id            String           @id @default(uuid())
  clienteId     String
  usuarioId    String
  total         Float            @db.DoublePrecision
  fechaPedido         DateTime         @default(now())
  observaciones String?          @db.Text
  fechaEnvio    DateTime?
  fechaActualizado   DateTime         @updatedAt

  cliente       Cliente          @relation(fields: [clienteId], references: [id])
  usuario      Usuario          @relation(fields: [usuarioId], references: [id])
  productos     DetallePedido[]
  estados       EstadoPedido[]
  detalleRecibo DetalleRecibo[]

  @@index([clienteId])
  @@index([usuarioId])
}

model DetallePedido {
  id         String @id @default(uuid())
  pedidoId   String
  productoId String
  cantidad   Int
  precio     Float  @db.DoublePrecision

  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  producto   Producto @relation(fields: [productoId], references: [id])

  @@unique([pedidoId, productoId])
  @@index([pedidoId])
  @@index([productoId])
}

model EstadoPedido { /// este modelo es para controlar lo estados
  id        String   @id @default(uuid())
  pedidoId  String
  estado    String
  fechaEstado     DateTime @default(now())

  pedido    Pedido   @relation(fields: [pedidoId], references: [id])

  @@index([pedidoId])
}


model MovimientoInventario {
  idMovimiento String   @id @default(uuid())
  idEmpresa String
  idProducto String
  fechaMovimiento DateTime @default(now())
  cantidadMovimiendo Int
  idTipoMovimiento String
  IdUsuario String

  empresa Empresa @relation(fields: [idEmpresa],references: [id])
  producto Producto @relation(fields: [idProducto],references: [id])
  usuario Usuario @relation(fields: [IdUsuario],references: [id])
  tipoMovimiento TipoMovimientos @relation(fields: [idTipoMovimiento],references: [idTipoMovimiento])

  @@index([idEmpresa])
  @@index([idProducto])
  @@index([IdUsuario])
  @@index([idTipoMovimiento])

}

model TipoMovimientos {
  idTipoMovimiento String @id @default(uuid())
  tipo             TipoMovimientoEnum
  movimientoInventario MovimientoInventario[]
}

enum TipoMovimientoEnum {
  ENTRADA
  SALIDA
  AJUSTE
}


model MovimientosCartera {
  idMovimientoCartera String @id @default(uuid())
  idCliente String
  valorMovimiento Float @db.DoublePrecision
  idUsuario String
  fechaMovimientoCartera DateTime @default(now())


  cliente Cliente @relation(fields: [idCliente],references: [id])
  usuario Usuario @relation(fields: [idUsuario],references: [id])

  @@index([idCliente])
  @@index([idUsuario])
}



